VERSION 5.00
Begin VB.UserDocument Settings 
   ClientHeight    =   3660
   ClientLeft      =   0
   ClientTop       =   0
   ClientWidth     =   5340
   ClipControls    =   0   'False
   ContinuousScroll=   0   'False
   HScrollSmallChange=   225
   LockControls    =   -1  'True
   ScaleHeight     =   3660
   ScaleWidth      =   5340
   ScrollBars      =   0  'None
   VScrollSmallChange=   225
   Begin VB.TextBox Text7 
      Height          =   300
      Left            =   1140
      TabIndex        =   18
      Top             =   750
      Width           =   2685
   End
   Begin VB.CheckBox Check3 
      Caption         =   "Use comment descriptions (similar to .NET <summary> tags)"
      Height          =   372
      Left            =   45
      TabIndex        =   11
      Top             =   3165
      Width           =   3360
   End
   Begin VB.TextBox Text6 
      Height          =   300
      Left            =   1125
      TabIndex        =   0
      Top             =   60
      Width           =   2685
   End
   Begin VB.TextBox Text4 
      Height          =   300
      Left            =   1320
      TabIndex        =   10
      Top             =   2805
      Width           =   2520
   End
   Begin VB.TextBox Text1 
      Height          =   300
      Left            =   1125
      TabIndex        =   1
      Top             =   405
      Width           =   2685
   End
   Begin VB.TextBox Text2 
      Height          =   300
      IMEMode         =   3  'DISABLE
      Index           =   0
      Left            =   1140
      PasswordChar    =   "-"
      TabIndex        =   2
      Top             =   1095
      Width           =   1305
   End
   Begin VB.TextBox Text3 
      Height          =   300
      Left            =   1305
      TabIndex        =   4
      Top             =   1440
      Width           =   2520
   End
   Begin VB.TextBox Text2 
      Height          =   300
      IMEMode         =   3  'DISABLE
      Index           =   1
      Left            =   2520
      PasswordChar    =   "."
      TabIndex        =   3
      Top             =   1095
      Width           =   1305
   End
   Begin VB.TextBox Text5 
      Height          =   300
      Left            =   1305
      TabIndex        =   5
      Top             =   1785
      Width           =   2520
   End
   Begin VB.CheckBox Check1 
      Caption         =   "Sign on Build Project Release."
      Height          =   270
      Left            =   45
      TabIndex        =   7
      Top             =   2475
      Width           =   2460
   End
   Begin VB.CheckBox Check2 
      Caption         =   "Sign on Command Line Build."
      Height          =   225
      Left            =   45
      TabIndex        =   6
      Top             =   2160
      Width           =   2415
   End
   Begin VB.CheckBox Check4 
      Caption         =   "Restricted to"
      Height          =   195
      Left            =   2505
      TabIndex        =   8
      Top             =   2160
      Width           =   1230
   End
   Begin VB.CommandButton Command3 
      Caption         =   "Restrictions"
      Enabled         =   0   'False
      Height          =   315
      Left            =   2535
      TabIndex        =   9
      Top             =   2415
      Width           =   1260
   End
   Begin VB.Label Label7 
      Caption         =   "Arguments:"
      Height          =   225
      Left            =   120
      TabIndex        =   19
      Top             =   780
      Width           =   1020
   End
   Begin VB.Label Label6 
      Caption         =   "Signtool.exe"
      Height          =   210
      Left            =   75
      TabIndex        =   17
      Top             =   105
      Width           =   930
   End
   Begin VB.Label Label4 
      Caption         =   "NSIS Make.exe"
      Height          =   210
      Left            =   60
      TabIndex        =   16
      Top             =   2850
      Width           =   1260
   End
   Begin VB.Label Label1 
      Caption         =   "Certificate:"
      Height          =   225
      Left            =   75
      TabIndex        =   15
      Top             =   435
      Width           =   1020
   End
   Begin VB.Label Label2 
      Caption         =   "Password:"
      Height          =   240
      Left            =   90
      TabIndex        =   14
      Top             =   1140
      Width           =   810
   End
   Begin VB.Label Label3 
      Caption         =   "Timestamp URL:"
      Height          =   225
      Left            =   75
      TabIndex        =   13
      Top             =   1485
      Width           =   1320
   End
   Begin VB.Label Label5 
      Caption         =   "Description URL:"
      Height          =   210
      Left            =   45
      TabIndex        =   12
      Top             =   1830
      Width           =   1260
   End
End
Attribute VB_Name = "Settings"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

Implements ISettings

Public WithEvents FCE As FileControlEvents
Attribute FCE.VB_VarHelpID = -1

Private Sub FCE_AfterWriteFile(ByVal VBProject As VBIDE.VBProject, ByVal FileType As VBIDE.vbext_FileType, ByVal FileName As String, ByVal Result As Integer)
    If CLng(GetSetting("BasicNeotext", "Options", "ProcedureDesc", 0)) = 1 Then
        If PathExists(FileName, True) Then
            BuildFileDescriptions FileName, False
        End If
    Else
        If GetFileExt(FileName, True, True) = "vbp" Then
            BuildFileDescriptions FileName, False
        End If
    End If
End Sub

Private Sub FCE_BeforeLoadFile(ByVal VBProject As VBIDE.VBProject, FileNames() As String)
    Dim cnt As Long
    If CLng(GetSetting("BasicNeotext", "Options", "ProcedureDesc", 0)) = 1 Then
        For cnt = LBound(FileNames) To UBound(FileNames)
            If PathExists(FileNames(cnt), True) Then
                If GetFileExt(FileNames(cnt), True, True) = "vbp" Then
                    
                End If
                BuildFileDescriptions FileNames(cnt), True
            End If
        Next
    Else
        For cnt = LBound(FileNames) To UBound(FileNames)
            If GetFileExt(FileNames(cnt), True, True) = "vbp" Then
                If PathExists(FileNames(cnt), True) Then
                    BuildFileDescriptions FileNames(cnt), True
                End If
            End If
        Next
    End If
End Sub

Private Sub Check1_Click()
    If Text2(1).Tag <> -1 Then SaveSetting "BasicNeotext", "Options", "ActiveOnMake", Check1.Value
End Sub

Private Sub Check2_Click()
    If Text2(1).Tag <> -1 Then SaveSetting "BasicNeotext", "Options", "ActiveOnLine", Check2.Value
End Sub

Private Sub Check3_Click()
    If Text2(1).Tag <> -1 Then SaveSetting "BasicNeotext", "Options", "ProcedureDesc", Check3.Value
End Sub

Private Sub Check4_Click()
    Command3.Enabled = (Check4.Value)
    If Text2(1).Tag <> -1 Then SaveSetting "BasicNeotext", "Options", "RestrictOnly", Check4.Value
End Sub

Private Sub Command3_Click()
    frmRestrict.Show 1, Me
End Sub

Private Sub FCE_RequestWriteFile(ByVal VBProject As VBIDE.VBProject, ByVal FileName As String, Cancel As Boolean)
        Dim vbproj As VBProject
        
'        For Each vbproj In ActiveVBProject.AllProject
'
'            If InStr(1, Replace(ReadFile(vbproj.FileName), " ", ""), "templateview=1", vbTextCompare) > 0 Then
'                If Not App_Load Then Load frmIcon
'
'                If invar = "" Then
'                    invar = ReadFile(App_Path & "Template\Projects\Exports.cls")
'                    Do Until invar = ""
'                        If Left(invar, 1) = "'" Then
'                            inval = inval & RemoveNextArg(invar, vbCrLf) & vbCrLf
'                        Else
'                            RemoveNextArg invar, vbCrLf
'                        End If
'                    Loop
'                End If
'
'                If vbproj.VBComponents.Count > 0 Then
'                    Dim vbcom As VBComponent
'
'                    For Index = 1 To vbproj.VBComponents.Count
'                        Set vbcom = vbproj.VBComponents.Item(Index)
'                        If vbcom.CodeModule.CountOfLines > 0 Then
'                            If Replace(vbcom.CodeModule.Lines(1, vbcom.CodeModule.CountOfLines), vbCrLf, "") = Replace(inval, vbCrLf, "") Then
'                                found = True
'                            End If
'                        End If
'                        Set vbcom = Nothing
'                    Next
'                    If Not found Then
'                        vbproj.VBComponents.AddFile App_Path & "Template\Projects\Exports.cls"
'                    End If
'                End If
'            End If
'        Next

End Sub

Private Sub Text1_Change()
    If Text2(1).Tag <> -1 Then SaveSetting "BasicNeotext", "Options", "Certificate", CStr(Text1.Text)
End Sub
Private Sub Text7_Change()
    If Text2(1).Tag <> -1 Then SaveSetting "BasicNeotext", "Options", "Auxiliary", CStr(Text7.Text)
End Sub

Private Sub Text2_Change(Index As Integer)
    If Text2(1).Tag <> -1 Then
        Text2(1).Tag = -1
        If Not (Trim(Text2(0).Text) <> Trim(Text2(1).Text) And (Not (Text2(1).Text = "" And Text2(0).Text = Text2(0).Tag))) Then
            If Text2(0).Text <> "" Then
                Dim txt As String
                txt = Text2(0).Text
                txt = EncryptString(txt, GetMachineName & "\\" & GetUserLoginName, True)
                SaveSetting "BasicNeotext", "Options", "Password", txt
                 Text2(1).Text = ""
                 MsgBox "Password has been set.", vbOKOnly + vbInformation, "Code Sign"
            ElseIf (Text2(1).Text = "") And (Text2(0).Text = "") Then
                SaveSetting "BasicNeotext", "Options", "Password", ""
            End If
        End If
        Text2(1).Tag = 0
    End If
End Sub

Private Sub Text3_Change()
    If Text2(1).Tag <> -1 Then SaveSetting "BasicNeotext", "Options", "TStampURL", Text3.Text
End Sub

Private Sub Text4_Change()
    If Text2(1).Tag <> -1 Then
        SaveSetting "BasicNeotext", "Options", "MakeNSIS", Text4.Text
        If PathExists(Text4.Text, True) Then
            Paths.Remove "MakeNSIS"
            Paths.Add Text4.Text, "MakeNSIS"
        End If
    End If
End Sub

Private Sub Text5_Change()
    If Text2(1).Tag <> -1 Then SaveSetting "BasicNeotext", "Options", "DescURL", Text5.Text
End Sub

Private Sub Text6_Change()
    If Text2(1).Tag <> -1 Then
        SaveSetting "BasicNeotext", "Options", "SignTool", Text6.Text
        If PathExists(Text6.Text, True) Then
            Paths.Remove "SignTool"
            Paths.Add Text6.Text, "SignTool"
        End If
    End If
End Sub

Private Sub Timer1_Timer()
'    If ProcessRunning("VB6.EXE") = 0 Then
'        KillApp "VBN.EXE"
'    End If
    
End Sub

Private Sub UserDocument_Initialize()

    Text2(1).Tag = -1
    
    Text6.Text = GetSetting("BasicNeotext", "Options", "SignTool")
    Text4.Text = GetSetting("BasicNeotext", "Options", "MakeNSIS")
    Text7.Text = GetSetting("BasicNeotext", "Options", "Auxiliary")
    Text1.Text = GetSetting("BasicNeotext", "Options", "Certificate")
    Text3.Text = GetSetting("BasicNeotext", "Options", "TStampURL")
    Text5.Text = GetSetting("BasicNeotext", "Options", "DescURL")
    
    Check1.Value = CLng(GetSetting("BasicNeotext", "Options", "ActiveOnMake", 0))
    Check2.Value = CLng(GetSetting("BasicNeotext", "Options", "ActiveOnLine", 0))
    Check3.Value = CLng(GetSetting("BasicNeotext", "Options", "ProcedureDesc", 0))
    Check4.Value = CLng(GetSetting("BasicNeotext", "Options", "RestrictOnly", 0))
    
    Dim txt As String
    txt = GetSetting("BasicNeotext", "Options", "Password", "")
    If txt <> "" Then txt = DecryptString(txt, GetMachineName & "\\" & GetUserLoginName, True)
    Text2(0).Text = txt
    Text2(0).Tag = Text2(0).Text
    
    Text2(1).Tag = 0

End Sub


Private Sub UserDocument_Resize()
    On Error Resume Next
    
    Text4.Width = UserDocument.ScaleWidth - (Screen.TwipsPerPixelX * 4) - Text4.Left
    Text6.Width = UserDocument.ScaleWidth - (Screen.TwipsPerPixelX * 4) - Text6.Left
    Text1.Width = UserDocument.ScaleWidth - (Screen.TwipsPerPixelX * 4) - Text1.Left
    Text7.Width = UserDocument.ScaleWidth - (Screen.TwipsPerPixelX * 4) - Text7.Left
    Text2(0).Width = ((UserDocument.ScaleWidth - (Screen.TwipsPerPixelX * 8) - Text2(0).Left) / 2) - (Screen.TwipsPerPixelX * 2)
    Text2(1).Width = ((UserDocument.ScaleWidth - Text2(0).Left) / 2) - (Screen.TwipsPerPixelX * 2)
    Text2(1).Left = Text2(0).Width + Text2(0).Left + (Screen.TwipsPerPixelX * 2)
    Text3.Width = UserDocument.ScaleWidth - (Screen.TwipsPerPixelX * 4) - Text3.Left
    Text5.Width = UserDocument.ScaleWidth - (Screen.TwipsPerPixelX * 4) - Text5.Left
    
    If UserDocument.ScaleWidth - (Screen.TwipsPerPixelX * 4) - Check4.Width >= (Check1.Width + (Screen.TwipsPerPixelX * 8)) Then
        Check4.Left = UserDocument.ScaleWidth - (Screen.TwipsPerPixelX * 4) - Check4.Width
    Else
        Check4.Left = Check1.Width + (Screen.TwipsPerPixelX * 8)
    End If
    
    If UserDocument.ScaleWidth - (Screen.TwipsPerPixelX * 4) - Command3.Width >= (Check2.Width + (Screen.TwipsPerPixelX * 8)) Then
        Command3.Left = UserDocument.ScaleWidth - (Screen.TwipsPerPixelX * 4) - Command3.Width
    Else
        Command3.Left = Check2.Width + (Screen.TwipsPerPixelX * 8)
    End If
    
    Check3.Width = UserDocument.ScaleWidth - (Screen.TwipsPerPixelX * 4) - Check3.Left
    
    If Err Then Err.Clear
    On Error GoTo 0
End Sub

Private Sub UserDocument_Terminate()
    Set FCE = Nothing
    If (chkElapse <> "WAIT") Then
        SetBNSettings
    End If
    
End Sub


Private Sub VPE_ItemAdded(ByVal VBProject As VBIDE.VBProject)

End Sub
